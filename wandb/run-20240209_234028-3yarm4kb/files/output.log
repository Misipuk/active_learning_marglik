Traceback (most recent call last):
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/run_acq_epig_marglik_40k.py", line 304, in <module>
    main(**args)
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/run_acq_epig_marglik_40k.py", line 125, in main
    x_original, y_original = dataset_to_tensors(train_dataset, device=device)
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/active_learning/utils.py", line 106, in dataset_to_tensors
    xy_train = [dataset[i] for i in indices]
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/active_learning/utils.py", line 106, in <listcomp>
    xy_train = [dataset[i] for i in indices]
  File "/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py", line 145, in __getitem__
    img = self.transform(img)
  File "/usr/local/lib/python3.10/dist-packages/torchvision/transforms/transforms.py", line 137, in __call__
    return F.to_tensor(pic)
  File "/usr/local/lib/python3.10/dist-packages/torchvision/transforms/functional.py", line 166, in to_tensor
    img = torch.from_numpy(np.array(pic, mode_to_nptype.get(pic.mode, np.uint8), copy=True))
KeyboardInterrupt
Traceback (most recent call last):
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/run_acq_epig_marglik_40k.py", line 304, in <module>
    main(**args)
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/run_acq_epig_marglik_40k.py", line 125, in main
    x_original, y_original = dataset_to_tensors(train_dataset, device=device)
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/active_learning/utils.py", line 106, in dataset_to_tensors
    xy_train = [dataset[i] for i in indices]
  File "/dss/dsshome1/0D/ge32jaq2/epig_plus_orig_marglik/active_learning_marglik/active_learning/utils.py", line 106, in <listcomp>
    xy_train = [dataset[i] for i in indices]
  File "/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py", line 145, in __getitem__
    img = self.transform(img)
  File "/usr/local/lib/python3.10/dist-packages/torchvision/transforms/transforms.py", line 137, in __call__
    return F.to_tensor(pic)
  File "/usr/local/lib/python3.10/dist-packages/torchvision/transforms/functional.py", line 166, in to_tensor
    img = torch.from_numpy(np.array(pic, mode_to_nptype.get(pic.mode, np.uint8), copy=True))
KeyboardInterrupt